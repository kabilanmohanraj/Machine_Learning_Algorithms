# -*- coding: utf-8 -*-
"""Wine_Data_Set.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qSYsGb7AZmOAGJNVlDvKfF5loU8jnR4q
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
from scipy import stats
# from scipy.stats import chi2
from statsmodels.graphics.gofplots import qqplot

# import seaborn as sns

wine_data = pd.read_csv('wine_dataset.csv')
wine_data.head()

wine_data.describe().transpose()

wine_data.columns

for column in wine_data:
    if wine_data[column].dtype in ['float64', 'int64']:
        plt.figure()
        wine_data[column].plot(kind='box')

outlier_list = ['Malic acid', 'Ash', 'Alcalinity of ash', 'Magnesium', 'Proanthocyanins', 'Color intensity', 'Hue', 'Proline']
for outlier in outlier_list:
    q1 = wine_data[outlier].quantile(0.25)
    q3 = wine_data[outlier].quantile(0.75)
    iqr = q3-q1
    a = q1-1.5*iqr
    b = q3+1.5*iqr
    wine_data = wine_data[wine_data[outlier]>a]
    wine_data = wine_data[wine_data[outlier]<b]

wine_data.shape
#verification of removal of outliers

wine_data[wine_data['Wine Type'] == 'One'].describe().T

wine_data[wine_data['Wine Type'] == 'Two'].describe().T

wine_data[wine_data['Wine Type'] == 'Three'].describe().T

for column in list(wine_data.columns)[:-1]:
    if wine_data[column].dtype in ['float64', 'int64']:
        plt.figure()
        plt.hist(wine_data[column])
        plt.xlabel(column)

for column in list(wine_data.columns)[:-1]:
    if wine_data[column].dtype in ['float64', 'int64']:
        plt.figure()
        qqplot(wine_data[column], dist=stats.norm, line='45', fit=True)
        plt.xlabel(column)
        lt.show()

cat1 = wine_data[wine_data['Wine Type'] == 'One'].copy()
cat2 = wine_data[wine_data['Wine Type'] == 'Two'].copy()
cat3 = wine_data[wine_data['Wine Type'] == 'Three'].copy()

def get_samples(df):
#     return np.random.choice(arr, size = round(len(arr)*0.20), replace=False, p=None)
    return df.sample(frac=0.4, replace=False)

sample1 = pd.DataFrame(get_samples(cat1))
# print(sample1)
sample2 = pd.DataFrame(get_samples(cat2))
# print(sample2)
sample3 = pd.DataFrame(get_samples(cat3))
# print(sample3)
merged_sample = [sample1, sample2, sample3]

merged_sample_df = pd.concat(merged_sample)
merged_sample_df

for column in list(wine_data.columns)[:-2]:
    plt.figure()
    plt.scatter(wine_data['Wine Type'], wine_data[column], edgecolors='black')
    plt.xlabel('Wine Type')
    plt.ylabel(column)

wine_data['encode_wt'] = 0

wine_data['encode_wt'][wine_data['Wine Type'] == 'One'] = 2
wine_data['encode_wt'][wine_data['Wine Type'] == 'Two'] = 1
wine_data['encode_wt'][wine_data['Wine Type'] == 'Three'] = 0

wine_data['encode_wt'].dtype

wine_data.corr()

from sklearn.linear_model import LinearRegression
model = LinearRegression()
X = wine_data[['OD280/OD315 of diluted wines',"Flavanoids", 'Proline', 'Total phenols']] #independent variables
y = wine_data["encode_wt"] #depedent variables
model.fit(X,y)
print("Intercept:", model.intercept_,"\nCoefficients:",model.coef_)

model.score(X, y)

y_pred = 0